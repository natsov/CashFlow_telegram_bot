import telebot
import datetime
from telebot import types
from db import BotDB
from dotenv import load_dotenv
import os

load_dotenv()

PROXY_URL = "http://proxy.server:3128"
BotDB = BotDB('finance.db')
bot = telebot.TeleBot(token=os.environ.get('TOKEN'), )


def button_start():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å')
    markup.add(start_button)
    return markup


@bot.message_handler(func=lambda message: True)
def start(message):
    if message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å' or message.text == '/start' or message.text == '–ù–∞–∑–∞–¥':
        if not BotDB.user_exists(message.from_user.id):
            BotDB.add_user(message.from_user.id, message.from_user.first_name)
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        answer1 = types.KeyboardButton('‚ûï–î–æ—Ö–æ–¥')
        answer2 = types.KeyboardButton('‚ûñ–†–∞—Å—Ö–æ–¥')
        answer3 = types.KeyboardButton('üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ / —Ä–∞—Å—Ö–æ–¥–æ–≤')
        answer4 = types.KeyboardButton('üõë–í—ã–π—Ç–∏')
        markup1.add(answer1, answer2, answer3, answer4)
        if message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–Ω–æ–≤–∞'.format(message.from_user),
                             reply_markup=markup1)
        else:
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} , –≤ CashFlowBot!\n\n'
                                              '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏'.format(message.from_user), reply_markup=markup1)
        bot.register_next_step_handler(message, found)


@bot.message_handler(content_types=['text'])
def found(message):
    if message.text == '‚ûï–î–æ—Ö–æ–¥':
        entering_amount_income(message)
    elif message.text == '‚ûñ–†–∞—Å—Ö–æ–¥':
        choosing_topics(message)
    elif message.text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ / —Ä–∞—Å—Ö–æ–¥–æ–≤':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ó–∞ –¥–µ–Ω—å')
        item2 = types.KeyboardButton('–ó–∞ –Ω–µ–¥–µ–ª—é')
        item3 = types.KeyboardButton('–ó–∞ –º–µ—Å—è—Ü')
        item4 = types.KeyboardButton('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')
        item5 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(item1, item2, item3, item4, item5)
        bot.send_message(message.chat.id, '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞?'.format(message.from_user), reply_markup=markup)
        bot.register_next_step_handler(message, statistic)
    elif message.text == 'üõë–í—ã–π—Ç–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å')
        markup.add(start_button)
        bot.send_message(message.chat.id, '–£–≤–∏–¥–∏–º—Å—è —Å–Ω–æ–≤–∞!', reply_markup=button_start())


@bot.message_handler(content_types=['text'])
def choosing_topics(message):
    result_flow = BotDB.get_categories_flow()
    if len(result_flow):
        answer_to_flow = f'üí∏–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤üí∏\n\n'
        for row in result_flow:
            answer_to_flow += f"{row[0]}"
            answer_to_flow += f" - {row[1]}\n"
        number2 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤')
        bot.register_next_step_handler(number2, entering_amount_flow)
        return bot.send_message(message.from_user.id, answer_to_flow)


@bot.message_handler(content_types=['text'])
def entering_amount_flow(message):
    name_cat_flow = BotDB.get_name_categories_flow(message.text)
    if name_cat_flow:
        id_cat = BotDB.get_category_id(name_cat_flow[0][0])
        name_flow = name_cat_flow[0][0]
        type_operation = '–†–∞—Å—Ö–æ–¥'
        amount_flow = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É')
        bot.register_next_step_handler(amount_flow, add_note_to_db_flow, id_cat, type_operation)
    else:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, entering_amount_flow)


@bot.message_handler(content_types=['text'])
def entering_amount_income(message):
    type_operation = '–î–æ—Ö–æ–¥'
    amount_income = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É')
    bot.register_next_step_handler(amount_income, add_note_to_db_income, type_operation)


@bot.message_handler(content_types=['text'])
def add_note_to_db_flow(message, id_cat, type_oper):
    if message.text.isalpha() or int(message.text) < 0:
        bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, add_note_to_db_flow, id_cat, type_oper)
    else:
        BotDB.add_note(message.from_user.id, type_oper, message.text, id_cat[0][0])
        answer = bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
        bot.register_next_step_handler(answer, found)


@bot.message_handler(content_types=['text'])
def add_note_to_db_income(message, type_oper):
    if message.text.isalpha() or int(message.text) < 0:
        bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, add_note_to_db_income, type_oper)
    else:
        BotDB.add_note(message.from_user.id, type_oper, message.text, None)
        answer = bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
        bot.register_next_step_handler(answer, found)


@bot.message_handler(content_types=['text'])
def statistic(message):
    records = ''
    if message.text == '–ó–∞ –¥–µ–Ω—å':
        records = BotDB.get_statistic(message.from_user.id, 'day')
    elif message.text == '–ó–∞ –Ω–µ–¥–µ–ª—é':
        records = BotDB.get_statistic(message.from_user.id, 'week')
    elif message.text == '–ó–∞ –º–µ—Å—è—Ü':
        records = BotDB.get_statistic(message.from_user.id, 'month')
    elif message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        records = BotDB.get_statistic(message.from_user.id, 'for all time')

    if len(records):
        sum_flow = 0
        sum_income = 0
        answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π {message.text}\n\n"
        for r in records:
            answer += ('‚ûï' if r[2] == '–î–æ—Ö–æ–¥' else '‚ûñ') + r[2]
            answer += f" - {r[3]} —Ä—É–±."
            date_str = r[4]
            date_obj = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S.%f%z")
            formatted_date = date_obj.strftime("%d %B %Y %H:%M")
            answer += f" –î–∞—Ç–∞: {formatted_date}\n"
            if r[2] == '–î–æ—Ö–æ–¥':
                sum_income += r[3]
            elif r[2] == '–†–∞—Å—Ö–æ–¥':
                sum_flow += r[3]
        answer += f"\n–ò—Ç–æ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {message.text}: \n–î–æ—Ö–æ–¥ - {sum_income} —Ä—É–±. \n–†–∞—Å—Ö–æ–¥ - {sum_flow} —Ä—É–±."
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, statistic)
    elif message.text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!')
        bot.register_next_step_handler(message, statistic)


bot.polling(none_stop=True)